# -*- coding: utf-8 -*-
"""Копия блокнота "Копия блокнота "Практика 0.7.0.ipynb""

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10TvNDk0lNGgzjh6Xm6URX8MkMFzXiwRS

Ссылка на материалы:  [пдф тут](https://drive.google.com/file/d/16Cm2tgrpuDH8eIdxdSYyOsfDPqnJ3byd/view?usp=sharing)

ФИО:
"""

pip install requests

"""## Задание 1. HTTP-запросы, ответы и погода

Описание:

Напишите HTTP-запрос для получения информации о погоде в введенном городе из API.

Можно использовать API: https://open-meteo.com/. Используйте метод GET.


Ввод
```
56.50, 60.35
```

Вывод
```
Сегодня (1.11) погода 20 ◦С, нет осадков, туман
```
"""

import requests
from datetime import datetime


# функция для отправки запроса
def send_request(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print('Response code:', response.status_code)
        return False


# отчистка данных
def clear_data(data):
    # определение даты
    current_date = datetime.today().date()
    day = current_date.day
    month = current_date.month
    current_date = f'{day}.{month}'

    # определение температуры
    temperature = data['current']['temperature_2m']
    temperature_format = data['current_units']['temperature_2m']

    # определение погодных условии
    weather_code = data['current']['weather_code']
    bad_weather = [51, 53, 55, 61, 63, 65, 71, 73, 75, 80, 81, 82 ]
    if weather_code in [0, 1]:
        message = 'нет осадков, ясно'
    elif weather_code == 45:
        message = 'нет осадков, туман'
    elif weather_code in bad_weather:
        message = 'осадки, без тумана'
    else:
        message = 'посмотри в окно'

    message = f'Сегодня ({current_date}) погода {temperature} {temperature_format}, {message}'

    return message


# основная функция
def main():
    coordinates = input('Введите ваши координаты:\n').split(', ')
    url = f'https://api.open-meteo.com/v1/forecast?latitude={coordinates[0]}&longitude={coordinates[1]}&current=temperature_2m,weather_code'
    data = send_request(url)
    print(clear_data(data))


if __name__ == '__main__':
    main()

"""## Задание 2. HTTP-запросы, ответы и покемоны

**Описание:**


Создайте код программы, которая будет взаимодействовать с API, со следующим функионалом:

1. Используя метод GET, отправьте запрос на endpoint /pokemon, чтобы получить список первых 20 покемонов

2. Извлеките имена покемонов из ответа и выведите их списком

3. Введите с помощью input() название одного из покемонов


```
Имя покемона: clefairy
```



4. Отправьте GET-запрос, чтобы получить полную информацию о выбранном покемоне

5. Извлеките и выведите следующие данные о введенном покемоне:

     • Имя

     • Тип

     • Вес

     • Рост

     • Способности

Используйте PokéAPI (https://pokeapi.co/), который предоставляет информацию о покемонах, их характеристиках, типах и другую информацию.
"""

import requests

def send_request(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print('Response code:', response.status_code)
        return False

def information(url):
    data = send_request(url)
    if not data:
        return

    pokemon = data['results']
    c = []
    for name in pokemon:
        c.append(name['name'])
    print(*c)

    name = input('Введите имя покемона: ')
    for poke in pokemon:
        if poke['name'] == name:
            abilities = {}
            type_ = {}
            a = poke['url']
            print(a)
            response = requests.get(a)
            if response.status_code == 200:
                poke_data = response.json()
                abilities = [
    ability['ability']['name']
    for ability in poke_data['abilities']
]
                type_ = [
    _type['type']['name']
    for _type in poke_data['types']
]
                weight =poke_data['weight']
                height =poke_data['height']
                print('имя:', name)
                print('тип:', *type_)
                print('вес:', weight)
                print('рост:', height)
                print('способности:', *abilities)
            else:
                print('Response code:', response.status_code)
            break

def main():
    url = 'https://pokeapi.co/api/v2/pokemon'
    information(url)

if __name__ == '__main__':
    main()

"""## Задание 3. HTTP-запросы, ответы и посты

**Описание:**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API, реализуя следующие функции:

1. Реализуйте функцию, которая выполняет GET-запрос к https://jsonplaceholder.typicode.com/posts и возвращает список постов в формате JSON

2. Реализуйте функцию, котороая получает вводимое ID поста, выполняет GET-запрос по ID и возвращает данные поста в формате JSON

3. Реализуйте функцию, которая выполняет обработку JSON из пункта 2 и выводит всю важную информацию в консоль
"""

import requests


def send_request(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print('Response code:', response.status_code)
        return False


def post(data):
    id = int(input('введите id сообщения:'))
    url = f'https://jsonplaceholder.typicode.com/posts/{id}'
    return url


def id(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        return None


def info(url):
    print('')
    print('Id пользователя:', url['userId'])
    print('id поста:', url['id'])
    print('заголовок поста:', url['title'])
    print('пост:', url['body'], '\n')

def main():
    url = f'https://jsonplaceholder.typicode.com/posts'
    data = send_request(url)
    url_id = post(data)
    info_id = id(url_id)
    print(info_id)
    info(info_id)


if __name__ == '__main__':
    main()

"""## Задание 4. HTTP-запросы, ответы и работа с постами

**Описание**

Создайте программу, которая будет взаимодействовать с JSONPlaceholder API (из предыдущего задания), реализуя новые функции:

1. Реализуйте функцию, которая принимает заголовок, содержимое и ID пользователя (информация вводится с помощью input()), выполняет POST-запрос для создания нового поста и возвращает информацию о созданном посте в формате JSON


```
Заголовок: Новый пост
Содержимое поста: Тут должно находиться содержимое нового поста...
ID пользователя: 10
```



2. Реализуйте функцию, которая принимает ID поста, новый заголовок и новое содержимое, выполняет PUT-запрос и возвращает обновлённый пост в формате JSON

3. Реализуйте функцию, которая принимает ID поста, выполняет DELETE-запрос и возвращает статус-код ответа
"""

import requests


def send_request(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print('Response code:', response.status_code)
        return False


def create():
    title = input('Введите заголовок поста: ')
    body = input('Введите содержимое поста: ')
    user_id = int(input('Введите ID пользователя: '))

    post_data = {
        "title": title,
        "body": body,
        "userId": user_id
    }

    url = 'https://jsonplaceholder.typicode.com/posts'
    response = requests.post(url, json=post_data)

    if response.status_code == 201:
        print('Пост успешно создан:')
        return response.json()


def update():
    post_id = int(input('Введите ID поста для обновления: '))
    new_title = input('Введите новый заголовок поста: ')
    new_body = input('Введите новое содержимое поста: ')

    update_data = {
        "title": new_title,
        "body": new_body
    }

    url = f'https://jsonplaceholder.typicode.com/posts/{post_id}'
    response = requests.put(url, json=update_data)

    if response.status_code == 200:
        print('Пост успешно обновлён:')
        return response.json()


def delete():
    post_id = int(input('Введите ID поста для удаления: '))

    url = f'https://jsonplaceholder.typicode.com/posts/{post_id}'
    response = requests.delete(url)

    if response.status_code == 200:
        print('Пост успешно удалён.')
        return response.status_code


def main():
    while True:
        print("Выберите действие:")
        print("1 - Создать новый пост")
        print("2 - Обновить существующий пост")
        print("3 - Удалить пост")
        a = input("Введите номер действия: ")

        if choice == "1":
            a = create_post()
        elif choice == "2":
            a = update_post()
        elif choice == "3":
            a = delete_post()
        else:
            break

        if result is not None:
            print(result)


if __name__ == '__main__':
    main()

"""## Задание 5. HTTP-запросы, ответы и пёсики

**Описание**

Создайте программу, которая будет взаимодействовать с Dog API, которая позволит получать список пород собак, вводить несколько пород и получать их фотогрфии.

Этапы:

1. Создайте функцию, которая использует метод GET и возвращает список всех пород собак в формате нумерованного списка

2. Реализуйте возможность ввода нескольких пород собак через запятую


```
african, chow, dingo
```



3. Создание функции, которая реализует запрос, возвращает и выводит изображениия собак, породы которых были введены до этого


Используйте Dog API (https://dog.ceo/dog-api/), который предоставляет информацию о породах собак и их изображения.

*Подсказка*



```
import requests
from PIL import Image
from IPython.display import display
import io

url = <____>
response = <____>
        
if response.<______> == <___>:
      image_url = response.json()['message']

res = requests.<__>(image_url)
img = Image.open(io.BytesIO(res.content))
display(img)
```
"""

import requests
from PIL import Image
from IPython.display import display
import io


def breeds():
    url = "https://dog.ceo/api/breeds/list/all"
    response = requests.get(url)
    if response.status_code == 200:
        breeds = response.json()['message']
        breeds_list = list(breeds.keys())
        for i, breed in enumerate(breeds_list, start=1):
            print(f"{i}. {breed}")
        return breeds_list


def images(breeds):
    for breed in breeds:
        url = f"https://dog.ceo/api/breed/{breed}/images/random"
        response = requests.get(url)
        if response.status_code == 200:
            image_url = response.json()['message']
            img_response = requests.get(image_url)
            img = Image.open(io.BytesIO(img_response.content))
            print(f"Изображение породы {breed}:")
            display(img)


def main():
    breeds_list = breeds()
    if not breeds_list:
        return

    user_input = input("Введите несколько пород собак через запятую: ")
    user_breeds = [breed.strip() for breed in user_input.split(",") if breed.strip() in breeds_list]

    if user_breeds:
        images(user_breeds)


main()