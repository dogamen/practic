# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.4.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dCmSfZQ8cvkYGEwujrlRcSGyjxJhzQE9

Введите ваше ФИО:
"""

Елгин Никита Сергеевич

"""***Дисклеймер***

В данной практике запрещено использования функций:


*   sum()
*   min()
*   max()
*   average()
*   reversed()
*   sorted()
*   готовые функции или библиотеки

**Задача 1:**



Интернет-магазин предлагает следующие условия скидок:

*   Для заказов больше 1000 единиц, клиент получает скидку 5%. Если клиент использует промокод SUPERDISCOUNT, он получает скидку 10% (вместо 5%).
*  Для заказов более 5000 единиц, клиент получает скидку 15%, а использование промокода SUPERDISCOUNT увеличивает скидку до 20% (вместо 15%).

Этап 1:
Ввод:
```
Введите стоимость единицы товара: 5
Введите количество товара: 1001
Введите промокод: GiVEMEDISCONT
```

Вывод:

```
Ваша скидка: 5%
Итоговая сумма: 4754.75
```
Этап 2:

Оформите ваш код в виде функции
"""

def calculation(a, b, c):
    a = a * b
    if b > 1000 and b < 5000:
        if c == "SUPERDISCOUNT":
            a = a - (a/100*10)
            d = '10%'
        else:
            a = a - (a/100*5)
            d = '5%'
    elif b > 5000:
        if c == "SUPERDISCOUNT":
            a = a - (a/100*20)
            d = '20%'
        else:
            a = a - (a/100*15)
            d = '25%'
    else:
        if c == "SUPERDISCOUNT":
            a = a - (a/100*5)
            d = '5%'
        else:
            d = '0%'
            True
    return print(*(' Ваша скидка:', d), '\n', *('Итоговая сумма:', a), '\n')


price = int(input("Введите стоимость единицы товара:"))
count = int(input("Введите количество товара:"))
promo = input("Введите промокод:")
calculation(price, count, promo)

"""**Задача 2:**

Этап 1:
Напишите программу способную отфильтровать список и вывести только положительные элементы


Ввод:
```
-1 5 1 2 -3
```

Вывод:

```
5 1 2
```

Этап 2:

Оформите ваш код в виде функции
"""

def plus(a, b):
    for i in range(len(a)):
        if a[i] > 0:
            b.append(a[i])
        else:
            True
    return b


numbers = list(map(int, input().split()))
numbers1 = []
print(*plus(numbers, numbers1))

"""**Задача 3:**

Этап 1:
Напишите программу реализующую Алгоритм Евклида


> Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.



Ввод:
```
30 18
```

Вывод:

```
6
```

Этап 2:
Оформите ваш код в виде функции

"""

def NOD(a, b):
  c = 1
  d = 0
  while a - b > 0 or b - a > 0:
    if a > b:
      c = a - b
      a, b = b, c
    else:
      c = b - a
      b, a = a, c
  return b


number1, number2 = map(int, input().split())
print(NOD(number1, number2))

"""**Задача 4:**

Этап 1:
Напишите функцию программу, которая принимает строку и возвращает список слов и количество их упомнинаний в предложении

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
apple banana apple
```

Вывод:

```
apple: 2,
banana: 1
```
"""

def repit(a):
    b = {}
    for i in a:
        if i in b:
            b[i] += 1
        else:
            b[i]=1
    for a, b in b.items():
        print(f"{a}:", f"{b}")

words = list(map(str, input().split()))
repit(words)

"""**Задача 5:**

Этап 1:
Детектор анаграмм Напишите программу на Python, которая принимает в качестве входных данных две строки и проверяет, являются ли они анаграммами друг друга

Этап 2:
Оформите ваш код в виде функции

Ввод:
```
listen, silent
```

Вывод:

```
True
```
"""

def anogram(a, b):
    if(sorted(a)== sorted(b)):
        return True
    else:
        return False


word1, word2 = map(str, input().split(", "))
print(anogram(word1, word2))

"""**Задача 6:**

Шифр ​​Цезаря

Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.

Этап 1:

Напишите код для реализации данной задачи

Этап 2:

Оформите код в виде нескольких функций:

* Зашифровывает сообщение
* Расшифровывает сообщение
"""

def cezar(a, b, c):
    alfavit = "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz"
    ralfavit = "zyxwvutsrqponmlkjihgfedcbazyxwvutsrqponmlkjihgfedcba"
    d = ""
    if c == 1:
        for i in a:
            c1 = alfavit.find(i)
            c2 = c1 + b
            if i in alfavit:
                d += alfavit[c2]
            else:
                d += i
        return d
    else:
        for i in a:
            if i == "y":
                c2 = 0
            elif i == "z":
                c2 = 1
            else:
                c1 = ralfavit.find(i)
                c2 = c1 + b
            if i in alfavit:
                d += ralfavit[c2]
            else:
                d += i
        return d


message = input("сообщение:")
smeshenie = int(input("Шаг шифровки:"))
print("выберите вариант\n","1.шифрование\n","2.расшифровывание\n")
variant = int(input())

print(cezar(message, smeshenie, variant))

"""**Задача 7**

Задача: «Банковская система»

Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:

Требования
*   Система должна позволять клиентам создавать счета и хранить их балансы.
*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.
*   Система должна позволять клиентам проверять свой текущий баланс.
*   Система должна позволять клиентам переводить деньги между счетами.
*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.


Задачи
1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.
Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.
2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.
3. Бонусное задание
Реализуйте способ хранения и печати истории транзакций для каждого счета.

Ограничения
Не используйте классы или словари.
Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.

"""

def create_account(name, balance):
    account = {'name': name, 'balance': balance}
    accounts.append(account)
    transactions.append(f"Счет создан: {name}, начальный баланс: {balance}")
    return print(transactions)


def deposit(name, amount):
    for account in accounts:
        if account['name'] == name:
            account['balance'] += amount
            transactions.append(f"Депозит: {name}, сумма: {amount}")
            return print(f"Депозит успешен. Новый баланс: {account['balance']}")
    return print("Счет не найден.")


def withdraw(name, amount):
    for account in accounts:
        if account['name'] == name:
            if account['balance'] >= amount:
                account['balance'] -= amount
                transactions.append(f"Снятие: {name}, сумма: {amount}")
                return print(f"Снятие успешено. Новый баланс:{account['balance']}")
            else:
                return print("Недостаточно средств.")
    return print("Счет не найден.")


def check(name):
    for account in accounts:
        if account['name'] == name:
            return print(f"Текущий баланс: {account['balance']}")
    return print("Счет не найден.")


def transfer(from_name, to_name, amount):
    from_account = None
    to_account = None

    for account in accounts:
        if account['name'] == from_name:
            from_account = account
        if account['name'] == to_name:
            to_account = account

    if from_account and to_account:
        if from_account['balance'] >= amount:
            from_account['balance'] -= amount
            to_account['balance'] += amount
            transactions.append(f"Перевод: {from_name} -> {to_name}, сумма: {amount}")
            return print(f"Перевод успешен. Новый баланс {from_name}: {from_account['balance']}, {to_name}: {to_account['balance']}")
        else:
            return print("Недостаточно средств для перевода.")
    return print("Один из счетов не найден.")


accounts = []
transactions = []
while True:
    print("выберите желаемое действие:", "1.создание счета", "2.начисление\снятие со счета", "3.проверка баланса", "4.перевод между счетами","5.история транзакций", sep="\n")
    a = int(input())
    if a == 1:
        name_account = input('введите название аккаунта:')
        balance_account = int(input('введите баланс акктаунта:'))
        create_account(name_account, balance_account)
    if a == 2:
        name_account = input('введите название аккаунта:')
        print('выберите желаемую транзакцию:', '1.снятие налиыных', '2.внесение наличных', sep='\n')
        b = int(input())
        if b == 1:
            amount = int(input('введите желаемую сумму транзакции:'))
            withdraw(name_account, amount)
        elif b == 2:
            amount = int(input('введите желаемую сумму транзакции:'))
            deposit(name_account, amount)
    if a == 3:
        name_account = input('введите название аккаунта:')
        check(name_account)
    if a == 4:
        f_name_account = input('введите название аккаунта:')
        l_name_account = input('введите название аккаунта:')
        amount = int(input('введите желаемую сумму транзакции:'))
        transfer(f_name_account, l_name_account, amount)
    if a == 5:
        print(transactions)