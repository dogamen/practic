# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.5.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Vl4L9Ygqx2Bn2fPTZG8m4GJeB4kqT4N

ФИО:
"""

Елгин Никита Сергеевич

"""# **Задание 1**

Дан словарь, содержащий имена и возраст людей, напишите программу выводящую возраст человека по имени

Дано:

```
{"Alice": 25, "Bob": 30, "Charlie": 35}
```

Вввод:


```
Alice
```

Вывод:


```
Alice 25
```
"""

a = {"Alice": 25, "Bob": 30, "Charlie": 35}
b = input()
print(b, a[b])

"""# **Задание 2**

Дан список, состоящий из целых чисел, необходимо написать функцию считающую сумму всех положительных четных чисел списка

Ввод:

```
1, 2, 3, 4, 5, 6, 7, 8, 9
```

Вывод:


```
20
```

***Запрещено:***

*   Использование готовых функций для суммирования чисел
"""

number = [*map(int, input().split(', '))]
s = 0


def count_(a, b):
    for i in a:
        if i % 2 == 0:
            b += i
    return b


print(count_(number, s))

"""# **Задание 3**

Дан словарь, содержащий название фрукта и его цвет, выведите список всех желтых фруктов


Дано:

```
fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
```

Вывод:


```
Yellow fruits:
banana
lemon
mango
```
"""

fruits_and_colors = {
    "apple": "red",
    "banana": "yellow",
    "mango": "yellow",
    "orange": "orange",
    "lemon": "yellow",
    "grape": "purple"
}
color = input()
print("Yellow fruits:")

for k,v in fruits_and_colors.items():
    if v == color:
        print(k)
        print('')

"""# **Задание 4**

Дан словарь, необходимо написать функцию меняющую ключ и значение местами

Дано:


```
{"a": 1, "b": 2, "c": 3}
```

Вывод:

```
{1: 'a', 2: 'b', 3: 'c'}
```
"""

number = {"a": 1, "b": 2, "c": 3}


def svap(a):
    b = ''
    b = {v:k for k, v in a.items()}
    return b


print(svap(number))

"""# **Задание 5**

Дан список слов, неограниченной длинны, сформируйте словарь, где в качестве ключа будет слово, а в качестве значения количество слов

**Критерии**


*   Словарь необходимо отсортировать по убыванию количества элементов в списке.
*   Подсчет элементов должен быть реализован в отдельной функции
*   Сортировка пары `ключ:значение` должна быть реализована также в виде отдельной функции




Дано:
```
['apple','banana','orange','apple','apple','banana']
```


Вывод:
```
{'apple':3, 'banana': 2, 'orange': 1}
```

***Запрещено:***

*   Использование готовых функций для сортировки
*   Использование готовых функций для подсчета элементов
"""

# Подсказка: сортировку словаря можно сделать через две функции (нахождение максимального эллемента и основной функции сортировки)
fruit = ['apple','banana','orange','apple','apple','banana']


def count(a):
    _fruit_ = {}
    for i in a:
        if i in _fruit_.keys():
            _fruit_[i] += 1
        else:
            _fruit_[i] = 1
    return(_fruit_)


print(count(fruit))

"""# **Задание 6**

Дан словарь, содержащий информацию о людях, необходимо:



*   Вывести всех людей старше 30 лет
*   Вывести список городов и количество людей из словаря проживающих в них
*   Вывести список профессий и список людей для каждой профессии

**Критерии**

Каждый из пунктов необходимо реализовать в виде функции
"""

people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

def age(a):
    b = [name for name, info in people_info.items() if info["age"] > 30]
    return print(b)


def city(a):
    city_population = {}
    for i in a.values():
        city = i["city"]
        if city in city_population:
            city_population[city] += 1
        else:
            city_population[city] = 1
    return print(city_population)


def professions(a):
    b = {}
    for k, v in a.items():
        c = v["occupation"]
        if c in b:
            b[c].append(k)
        else:
            b[c] = [k]
    return print(b)


people_info = {
    "Alice": {"age": 25, "city": "New York", "occupation": "Engineer"},
    "Bob": {"age": 30, "city": "Los Angeles", "occupation": "Designer"},
    "Charlie": {"age": 35, "city": "Chicago", "occupation": "Teacher"},
    "Diana": {"age": 28, "city": "Miami", "occupation": "Doctor"},
    "Ethan": {"age": 40, "city": "Seattle", "occupation": "Chef"},
    "Frank": {"age": 32, "city": "Atlanta", "occupation": "Lawyer"},
    "Gabriella": {"age": 29, "city": "San Francisco", "occupation": "Software Engineer"},
    "Harrison": {"age": 38, "city": "Denver", "occupation": "Architect"},
    "Isabella": {"age": 26, "city": "Washington D.C.", "occupation": "Journalist"},
    "Julian": {"age": 42, "city": "Miami", "occupation": "Musician"},
    "Kate": {"age": 31, "city": "Philadelphia", "occupation": "Nurse"},
    "Lucas": {"age": 36, "city": "Nashville", "occupation": "Businessman"},
    "Mia": {"age": 27, "city": "Atlanta", "occupation": "Artist"},
    "Natalie": {"age": 39, "city": "Portland", "occupation": "Writer"},
    "Oliver": {"age": 44, "city": "Minneapolis", "occupation": "Professor"},
    "Penelope": {"age": 33, "city": "San Diego", "occupation": "Marketing Manager"},
    "Quincy": {"age": 41, "city": "Nashville", "occupation": "Singer"},
    "Rachel": {"age": 34, "city": "Cleveland", "occupation": "Teacher"},
    "Sophia": {"age": 29, "city": "Nashville", "occupation": "Engineer"},
    "Tessa": {"age": 37, "city": "Miami", "occupation": "Lawyer"}
}

age(people_info)
city(people_info)
professions(people_info)

"""# **Задание 7**

Задание: Разработка системы отзывов о предметах

Описание: Создать программу на Python для хранения и управления отзывами о предметах учебного курса. Программа должна позволять пользователям добавлять, просматривать и удалять отзывы, а также вычислять средний балл по заданному предмету.

**Функционал:**

*   Добавление отзыва и оценки:
   *   Пользователь может ввести название предмета, оценку (от 1 до 5) и текст отзыва.
   *   Отзывы должны храниться в структуре данных (например, словаре), где ключом будет название предмета, а значением - список отзывов (каждый отзыв может хранить оценку и комментарий).
*   Просмотр отзывов и оценок:
   *   Пользователь может запросить отзывы для указанного предмета.
   *   Если для указанного предмета есть отзывы, программа должна отобразить список всех отзывов и соответствующих оценок.
*   Удаление отзыва:
   *   Пользователь может удалить отзыв по индексу. Необходимо заранее уведомить пользователя о том, какие отзывы доступны для удаления.
   *   Программа должна обработать ситуацию, когда индекс введен неправильно.
*   Вычисление среднего балла по предмету:
   *   Пользователь может ввести название предмета, и программа должна вычислить и вывести средний балл по всем отзывам для этого предмета.
   *   Если отзывов нет, программа должна сообщить об этом.


**Критерии:**

*   Код должен быть оформлен в виде функций
*   Необходимо обрабатывать неправильный ввод пользователя
*   Должны быть комментарии к функциям
*   Присутсвует весь дополнительный функционал



**Опционально:**

Предлагаю вам добавить свои критерии оценки или вопросы, на которые должен ответить студент, чтобы оценить пару
"""

reviews = {}

def add(subject, rating, comment):
    """Добавляет отзыв о предмете."""
    if subject not in reviews:
        reviews[subject] = []
    reviews[subject].append({'rating': rating, 'comment': comment})
    print(f"Отзыв о предмете '{subject}' добавлен.")

def view(subject):
    """Просматривает отзывы для указанного предмета."""
    if subject in reviews and reviews[subject]:
        print(f"Отзывы о предмете '{subject}':")
        for i, review in enumerate(reviews[subject]):
            print(f"{i + 1}. Оценка: {review['rating']}, Комментарий: {review['comment']}")
    else:
        print(f"Нет отзывов о предмете '{subject}'.")

def delete(subject, index):
    """Удаляет отзыв по индексу."""
    if subject in reviews and 0 <= index < len(reviews[subject]):
        deleted = reviews[subject].pop(index)
        print(f"Удален отзыв о предмете '{subject}': Оценка: {deleted['rating']}, Комментарий: {deleted['comment']}")
    else:
        print("Ошибка: неверный индекс отзыва.")

def calculate(subject):
    """Вычисляет средний балл по предмету."""
    if subject in reviews and reviews[subject]:
        total_rating = sum(review['rating'] for review in reviews[subject])
        average_rating = total_rating / len(reviews[subject])
        print(f"Средний балл по предмету '{subject}': {average_rating:.2f}")
    else:
        print(f"Нет отзывов для расчета среднего балла по предмету '{subject}'.")


while True:
    print("\nМеню:", "1. Добавить отзыв", "2. Просмотреть отзывы", "3. Удалить отзыв", "4. Вычислить средний балл", "5. Выход", sep='\n')
    choice = input("Выберите действие: ")
    if choice == '1':
        subject = input("Введите название предмета: ")
        rating = int(input("Введите оценку (1-5): "))
        if 1 <= rating <= 5:
            comment = input("Введите текст отзыва: ")
            add(subject, rating, comment)
        else:
            print("Оценка должна быть от 1 до 5.")
    elif choice == '2':
        subject = input("Введите название предмета для просмотра отзывов: ")
        view(subject)
    elif choice == '3':
        subject = input("Введите название предмета для удаления отзыва: ")
        view(subject)
        try:
            index = int(input("Введите номер отзыва для удаления: ")) - 1
            delete(subject, index)
        except ValueError:
            print("Пожалуйста, введите корректный номер отзыва.")
    elif choice == '4':
        subject = input("Введите название предмета для вычисления среднего балла: ")
        calculate(subject)
    elif choice == '5':
        print("Выход из программы.")
        break
    else:
        print("Некорректный выбор. Пожалуйста, выберите еще раз.")