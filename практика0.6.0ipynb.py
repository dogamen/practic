# -*- coding: utf-8 -*-
"""Копия блокнота "Практика 0.6.0.ipynb"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XiR6h9buhv9eonfqEsRMpyHocTsxHjEj

---

# **Дисклеймер**

В данной практике будет введен дополнительный критерий: чистота и читаемость кода, а также соблюдение правил описанных в начале практики

---

# Задание 1

**Задача:**

Напишите функцию очищающий список от дубликтов


*Запрещено:*

*   Использовать set() или готовые функции очищающие список от дубликатов

Вввод:

```
apple banana apple 1 3 4 4 5
```


Вывод:

```
apple banana 1 3 4 5
```
"""

def duble(list_):
    result = []
    for item in list_:
        if item not in result:
            result.append(item)
    return result

# Пример использования
my_list = input().split()
cleaned_list = duble(my_list)
print(*cleaned_list)

"""# Задание 2

**Задача:**

Написать функцию для нахождения простых чисел в диапазоне

Ввод:

```
10, 50
```

Вывод:

```
11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47
```
"""

def is_prime(num):
    count = 0
    for i in range(1, num+1):
        if num % i == 0:
            count += 1

    if count == 2:
        return True
    return False


def main(first, last):
    result = list()
    for i in range(first, last+1):
        if is_prime(i):
            result.append(i)
    return result

limit1_f, limit_l = map(int, input().split(', '))
result = main(limit1_f, limit_l)

print(*result, sep=', ')

"""# Задание 3

Напишите функцию для объединения двух списков (список ключей и список значении) в словарь

*Запрещено:*

*   Использования готовых функции для объединения списков (пример: zip() )

Дано:

```
keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]
```

Вывод:
```
{'a': 1, 'b': 2, 'c': 3, 'e': 4}
```



"""

def dict_(keys, values):
    my_dict = {}
    count = 0

    for i in keys:
        count += 1

    for i in range(count):
        my_dict[keys[i]] = values[i]

    return print(my_dict)


keys = ['a', 'b', 'c', 'e' ]
values = [1, 2, 3, 4]

dict_(keys, values)

"""# Задание 4

Напишите функцию(ии) для подсчета статистических параметров:
*   Сумму
*   Среднее арифметическое
*   Медиану
*   Моду


*Запрещено:*

*   sum()
*   sorted()
*   и других функции предоставляющих готовое решение задания

Дано:

```
numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]

```

Вывод:
```
{'mean': 5.181818181818182, 'median': 5, 'mode': 2, 'sum': 57}
```

"""

numbers = [1, 2, 2, 3, 4, 5, 6, 7, 8 ,9 ,10]

finish = {}


def sum(num):
    global finish
    a = 0

    for i in num:
        a += num[i]
    a = a - 1
    finish['sum'] = a
    return finish


def mid_arefm(num):
    len_ = len(num)
    a = 0

    for i in num:
        a += num[i]
    a = a - 1
    mean = a / len_
    finish['mean'] = mean
    return finish


def median(num):
    len_ = len(num)
    mid = int(len_ / 2 - 0.5)
    finish['median'] = mid
    return finish


def mode(num):

    count_ = {}

    for number in num:
        count_[number] = count_.get(number, 0) + 1

    mode = max(count_, key=count_.get)
    finish['mode'] = mode
    return finish


mid_arefm(numbers)
median(numbers)
mode(numbers)
sum(numbers)

print(finish)

"""# Задание 5

На ввод поступает строка символов. Строка состоит из слов, которые отделены друг от друга пробелами. Необходимо вывести самое длинное слово и его порядковый номер.

*Запрещено:*

*   len()

Дано:

```
Страдание и боль всегда обязательны для широкого сознания и глубокого сердца.

```

Вывод:
```
Самое длинное слово с номером 5: обязательны
```
"""

def word_len(word):
    count = 0

    for symbol in word:
        count += 1
    return count


def max_len(a):
    count = 0
    need_word = ''
    for i in a:
        word1 =word_len(i)
        if word1 > count:
            count = word1
            need_word = i
    return print('Самое длинное слово с номером ', a.index(need_word)+1,
                 ': ', need_word, sep='')


words = input().split(' ')
max_len(words)

"""# Задание 6

Напишите программу, для управления оценками студентов, со следующими функциями:

* Добавление информации о студенте и его оценках.
* Подсчет среднего балла студента.
* Получение списка всех студентов с их средними баллами.
* Поиск студента по имени и вывод его оценок и среднего балла.




"""

students = {}


def add(name, grades):
    average = sum(grades) / len(grades)
    students[name] = {'grades': grades, 'average': average}


def list_students():

    for name, info in students.items():
        grades = info['grades']
        average = info['average']
        print(f"Студент: {name}, Оценки: {grades}, Средний балл: {average}")


def find(name):

    if name in students:
        grades = students[name]['grades']
        avg = students[name]['average']
        print(f"Студент: {name}, Оценки: {grades}, Средний балл: {avg}")
    else:
        print("Студент не найден.")


while True:
    print('+ ячейка студента', '1.да', '2.нет', '\n')
    a = int(input())
    if a == 1:
        name = input('введите имя студента:')
        grades = list(map(int, input('введите оценки студента:').split()))
        add(name, grades)
    else:
        break

print("Список всех студентов:")
list_students()


while True:
    print('поиск студента по имени', '1.да', '2.нет','\n')
    b = int(input())
    if b == 1:
        stud_name = input('введите имя студента')
        find(stud_name)
    else:
        break

"""# Задание 7


**Задача:**

Создайте приложение-викторину с командной строкой, которое задает пользователям вопросы по различным темам и отслеживает их результаты.

Ключевые особенности:

*   Хранение данных о вопросах и ответах на них, а также баллов за каждый вопрос
*   Реализуйте функцию для представления вопросов, принятия ответов пользователей и предоставления обратной связи о том, являются ли ответы правильными или неправильными.
*  После завершения викторины отобразите общий балл пользователя из числа ответов на вопросы.
*  Реализуйте функцию добавления нового вопроса
*  Реализуйте функцию перемешивания вопросов, для отображения случайного вопроса

"""

import random


def add(que):
    question = input("Введите новый вопрос: ")
    correct_answer = input("Введите правильный ответ: ")
    options = []

    print("Введите варианты ответов (введите 'стоп' для завершения ввода):")
    while True:
        option = input("Вариант ответа: ")
        if option.lower() == 'стоп':
            break
        options.append(option)

    que[question] = (correct_answer, *options)
    print("Вопрос успешно добавлен!\n")


def quiz(que):
    score = 0

    shuffled = shuffle(que)
    random.shuffle(shuffled)

    for question, (correct_answer, *options) in shuffled:
        print(question)
        print("Варианты ответов:")
        for i, option in enumerate(options, start=1):
            print(f"{i}. {option}")

        user_answer = input("Введите номер вашего ответа: ")
        user_answer_index = int(user_answer) - 1
        if options[user_answer_index] == correct_answer:
            print("Правильно!\n")
            score += 1
        else:
            print(f"Неправильно! Правильный ответ: {correct_answer}\n")

    print(f"Ваш итоговый счёт: {score}/{len(questions)}")


questions = {
    "Какой цвет у неба в ясный день?": ("Синий", "Синий", "Зеленый", "Красный"),
    "Сколько ног у паука?": ("Восемь", "Шесть", "Восемь", "Девять"),
    "Какой океан больше?": ("Тихий", "Атлантический", "Индийский", "Тихий")
}


add(questions)

while True:
    print('еще вопрос?:', '1.да', '2.нет', '\n')
    a = int(input())
    if a == 1:
        add(questions)
    elif a == 2:
        break

quiz(questions)